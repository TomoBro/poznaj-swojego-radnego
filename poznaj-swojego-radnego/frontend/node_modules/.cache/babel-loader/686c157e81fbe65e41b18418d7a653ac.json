{"ast":null,"code":"import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    throwOnError\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token) {\n    this.headers['Authorization'] = `Bearer ${token}`;\n    return this;\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from(table) {\n    const url = `${this.url}/${table}`;\n    return new PostgrestQueryBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const url = `${this.url}/rpc/${fn}`;\n    return new PostgrestRpcBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    }).rpc(params, {\n      head,\n      count\n    });\n  }\n}","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestRpcBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","throwOnError","Object","assign","shouldThrowOnError","auth","token","from","table","rpc","fn","params","head","count"],"sources":["../../src/PostgrestClient.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,mBAAmB,MAAM,2BAA2B;AAE3D,SAASC,eAAe,QAAQ,iBAAiB;AAGjD,eAAc,MAAOC,eAAe;EAOlC;;;;;;;EAOAC,YACEC,GAAW,EACX;IACEC,OAAO,GAAG,EAAE;IACZC,MAAM;IACNC,KAAK;IACLC;EAAY,IAMV,EAAE;IAEN,IAAI,CAACJ,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQT,eAAe,GAAKI,OAAO,CAAE;IACjD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACI,kBAAkB,GAAGH,YAAY;EACxC;EAEA;;;;;EAKAI,IAAIA,CAACC,KAAa;IAChB,IAAI,CAACR,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUQ,KAAK,EAAE;IACjD,OAAO,IAAI;EACb;EAEA;;;;;EAKAC,IAAIA,CAAUC,KAAa;IACzB,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,IAAIW,KAAK,EAAE;IAClC,OAAO,IAAIhB,qBAAqB,CAAIK,GAAG,EAAE;MACvCC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBI,kBAAkB,EAAE,IAAI,CAACA;KAC1B,CAAC;EACJ;EAEA;;;;;;;;EAQAK,GAAGA,CACDC,EAAU,EACVC,MAAe,EACf;IACEC,IAAI,GAAG,KAAK;IACZC,KAAK,GAAG;EAAI,IAIV,EAAE;IAEN,MAAMhB,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,QAAQa,EAAE,EAAE;IACnC,OAAO,IAAIjB,mBAAmB,CAAII,GAAG,EAAE;MACrCC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBI,kBAAkB,EAAE,IAAI,CAACA;KAC1B,CAAC,CAACK,GAAG,CAACE,MAAM,EAAE;MAAEC,IAAI;MAAEC;IAAK,CAAE,CAAC;EACjC","ignoreList":[]},"metadata":{},"sourceType":"module"}