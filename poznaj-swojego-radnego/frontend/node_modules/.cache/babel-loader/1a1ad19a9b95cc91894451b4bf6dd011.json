{"ast":null,"code":"import { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*') {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    return this;\n  }\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  order(column, {\n    ascending = true,\n    nullsFirst = false,\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`;\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${nullsFirst ? 'nullsfirst' : 'nullslast'}`);\n    return this;\n  }\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  limit(count, {\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  range(from, to, {\n    foreignTable\n  } = {}) {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`);\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\n   * Set the response type to CSV.\n   */\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","headers","maybeSingle","allowEmpty","csv"],"sources":["../../../src/lib/PostgrestTransformBuilder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}