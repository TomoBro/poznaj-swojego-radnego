{"ast":null,"code":"import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    throwOnError\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token) {\n    this.headers['Authorization'] = `Bearer ${token}`;\n    return this;\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from(table) {\n    const url = `${this.url}/${table}`;\n    return new PostgrestQueryBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const url = `${this.url}/rpc/${fn}`;\n    return new PostgrestRpcBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    }).rpc(params, {\n      head,\n      count\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}