{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { resolveFetch } from './helper';\nexport class FunctionsClient {\n  constructor(url, {\n    headers = {},\n    customFetch\n  } = {}) {\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n  invoke(functionName, invokeOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          headers,\n          body\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n        const response = yield this.fetch(`${this.url}/${functionName}`, {\n          method: 'POST',\n          headers: Object.assign({}, this.headers, headers),\n          body\n        });\n        const isRelayError = response.headers.get('x-relay-error');\n        if (isRelayError && isRelayError === 'true') {\n          return {\n            data: null,\n            error: new Error(yield response.text())\n          };\n        }\n        let data;\n        const {\n          responseType\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n        if (!responseType || responseType === 'json') {\n          data = yield response.json();\n        } else if (responseType === 'arrayBuffer') {\n          data = yield response.arrayBuffer();\n        } else if (responseType === 'blob') {\n          data = yield response.blob();\n        } else {\n          data = yield response.text();\n        }\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}