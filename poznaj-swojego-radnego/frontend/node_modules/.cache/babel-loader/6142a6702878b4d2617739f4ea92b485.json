{"ast":null,"code":"import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n  constructor(socket, headers, schema, tableName) {\n    const chanParams = {};\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n    const userToken = headers['Authorization'].split(' ')[1];\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n    this.subscription = socket.channel(topic, chanParams);\n  }\n  getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n    return records;\n  }\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n  on(event, callback) {\n    this.subscription.on(event, payload => {\n      let enrichedPayload = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors\n      };\n      enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n      callback(enrichedPayload);\n    });\n    return this;\n  }\n  /**\n   * Enables the subscription.\n   */\n  subscribe(callback = () => {}) {\n    this.subscription.onError(e => callback('SUBSCRIPTION_ERROR', e));\n    this.subscription.onClose(() => callback('CLOSED'));\n    this.subscription.subscribe().receive('ok', () => callback('SUBSCRIBED')).receive('error', e => callback('SUBSCRIPTION_ERROR', e)).receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n    return this.subscription;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}